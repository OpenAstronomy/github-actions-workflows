name: Build and publish Python package

on:
  workflow_call:
    inputs:
      targets:
        description: List of build targets for cibuildwheel
        required: false
        default: |
          - linux
          - macos
          - windows
        type: string
      sdist:
        description: Whether to build a source distribution
        required: false
        default: true
        type: boolean
      test_groups:
        description: PEP 735 dependency groups that should be installed for testing
        required: false
        default: ''
        type: string
      test_extras:
        description: Any extras_requires modifier that should be used to install the package for testing
        required: false
        default: ''
        type: string
      test_command:
        description: The command to run to test the package (will be run in a temporary directory)
        required: false
        default: ''
        type: string
      env:
        description: A map of environment variables to be available when building and testing
        required: false
        default: ''
        type: string
      libraries:
        description: Packages needed to build the source distribution for testing (installed using apt)
        required: false
        default: ''
        type: string
      sdist-runs-on:
        description: Which runner image to use to build and test the sdist
        required: false
        default: 'ubuntu-latest'
        type: string
      upload_to_pypi:
        description: A condition specifying whether to upload to PyPI
        required: false
        default: 'refs/tags/v'
        type: string
      repository_url:
        description: The PyPI repository URL to use
        required: false
        default: ''
        type: string
      upload_to_anaconda:
        description: A condition specifying whether to upload to Anaconda.org
        required: false
        default: false
        type: boolean
      anaconda_user:
        description: Anaconda.org user or organisation
        required: false
        default: ''
        type: string
      anaconda_package:
        description: Anaconda.org package name
        required: false
        default: ''
        type: string
      anaconda_keep_n_latest:
        description: If specified, only this number of the most recent versions are kept
        required: false
        default: -1
        type: number
      fail-fast:
        description: Whether to cancel all in-progress jobs if any job fails
        required: false
        default: false
        type: boolean
      timeout-minutes:
        description: The maximum number of minutes to let a build job run before GitHub automatically cancels it
        required: false
        default: 360
        type: number
      submodules:
        description: Whether to checkout submodules
        required: false
        default: true
        type: boolean
      checkout_ref:
        description: The ref to checkout
        required: false
        default: ''
        type: string
    secrets:
      pypi_token:
        required: false
      anaconda_token:
        required: false

jobs:

  targets:
    name: Load build targets
    if: ${{ inputs.targets != '' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
      upload_to_pypi: ${{ steps.set-upload.outputs.upload_to_pypi }}
    steps:
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'
      - run: echo $LOAD_BUILD_TARGETS_SCRIPT | base64 --decode > load_build_targets.py
        env:
          LOAD_BUILD_TARGETS_SCRIPT: IyAvLy8gc2NyaXB0DQojIHJlcXVpcmVzLXB5dGhvbiA9ICI9PTMuMTIiDQojIGRlcGVuZGVuY2llcyA9IFsNCiMgICAgICJjbGljaz09OC4yLjEiLA0KIyAgICAgInB5eWFtbD09Ni4wLjIiLA0KIyBdDQojIC8vLw0KaW1wb3J0IGpzb24NCmltcG9ydCBvcw0KaW1wb3J0IHJlDQoNCmltcG9ydCBjbGljaw0KaW1wb3J0IHlhbWwNCg0KTUFDSElORV9UWVBFID0gew0KICAgICJsaW51eCI6ICJ1YnVudHUtbGF0ZXN0IiwNCiAgICAibWFjb3MiOiAibWFjb3MtbGF0ZXN0IiwNCiAgICAid2luZG93cyI6ICJ3aW5kb3dzLWxhdGVzdCIsDQogICAgIndpbmRvd3MtYXJtIjogIndpbmRvd3MtMTEtYXJtIiwNCn0NCg0KQ0lCV19CVUlMRCA9IG9zLmVudmlyb24uZ2V0KCJDSUJXX0JVSUxEIiwgIioiKQ0KQ0lCV19BUkNIUyA9IG9zLmVudmlyb24uZ2V0KCJDSUJXX0FSQ0hTIiwgImF1dG8iKQ0KDQoNCkBjbGljay5jb21tYW5kKCkNCkBjbGljay5vcHRpb24oIi0tdGFyZ2V0cyIsIGRlZmF1bHQ9IiIpDQpkZWYgbG9hZF9idWlsZF90YXJnZXRzKHRhcmdldHMpOg0KICAgICIiIlNjcmlwdCB0byBsb2FkIGNpYnVpbGR3aGVlbCB0YXJnZXRzIGZvciBHaXRIdWIgQWN0aW9ucyB3b3JrZmxvdy4iIiINCiAgICAjIExvYWQgbGlzdCBvZiB0YXJnZXRzDQogICAgdGFyZ2V0cyA9IHlhbWwubG9hZCh0YXJnZXRzLCBMb2FkZXI9eWFtbC5CYXNlTG9hZGVyKQ0KICAgIHByaW50KGpzb24uZHVtcHModGFyZ2V0cywgaW5kZW50PTIpKQ0KDQogICAgIyBDcmVhdGUgbWF0cml4DQogICAgbWF0cml4ID0geyJpbmNsdWRlIjogW119DQogICAgZm9yIHRhcmdldCBpbiB0YXJnZXRzOg0KICAgICAgICBtYXRyaXhbImluY2x1ZGUiXS5hcHBlbmQoZ2V0X21hdHJpeF9pdGVtKHRhcmdldCkpDQoNCiAgICAjIE91dHB1dCBtYXRyaXgNCiAgICBwcmludChqc29uLmR1bXBzKG1hdHJpeCwgaW5kZW50PTIpKQ0KICAgIHdpdGggb3Blbihvcy5lbnZpcm9uWyJHSVRIVUJfT1VUUFVUIl0sICJhIikgYXMgZjoNCiAgICAgICAgZi53cml0ZShmIm1hdHJpeD17anNvbi5kdW1wcyhtYXRyaXgpfVxuIikNCg0KDQpkZWYgZ2V0X29zKHRhcmdldCk6DQogICAgaWYgIm1hY29zIiBpbiB0YXJnZXQ6DQogICAgICAgIHJldHVybiBNQUNISU5FX1RZUEVbIm1hY29zIl0NCiAgICBpZiAid2luX2FybSIgaW4gdGFyZ2V0Og0KICAgICAgICByZXR1cm4gTUFDSElORV9UWVBFWyJ3aW5kb3dzLWFybSJdDQogICAgaWYgIndpbiIgaW4gdGFyZ2V0Og0KICAgICAgICByZXR1cm4gTUFDSElORV9UWVBFWyJ3aW5kb3dzIl0NCiAgICByZXR1cm4gTUFDSElORV9UWVBFWyJsaW51eCJdDQoNCg0KZGVmIGdldF9jaWJ3X2J1aWxkKHRhcmdldCk6DQogICAgaWYgdGFyZ2V0IGluIHsibGludXgiLCAibWFjb3MiLCAid2luZG93cyJ9Og0KICAgICAgICByZXR1cm4gQ0lCV19CVUlMRA0KICAgIHJldHVybiB0YXJnZXQNCg0KDQpkZWYgZ2V0X2NpYndfYXJjaHModGFyZ2V0KToNCiAgICAiIiINCiAgICBIYW5kbGUgbm9uLW5hdGl2ZSBhcmNoaXRlY3R1cmVzDQoNCiAgICBjaWJ3IGFsbG93cyBydW5uaW5nIG5vbi1uYXRpdmUgYnVpbGRzIG9uIHZhcmlvdXMgcGxhdGZvcm1zOg0KICAgIGh0dHBzOi8vY2lidWlsZHdoZWVsLnB5cGEuaW8vZW4vc3RhYmxlL29wdGlvbnMvI2FyY2hzDQoNCiAgICBUaGlzIGxvZ2ljIG92ZXJyaWRlcyB0aGUgImF1dG8iIGZsYWcgYmFzZWQgb24gT1MgYW5kIGEgbGlzdCBvZiBzdXBwb3J0ZWQNCiAgICBub24tbmF0aXZlIGFyY2ggaWYgYSBub24tbmF0aXZlIGFyY2ggaXMgZ2l2ZW4gZm9yIGEgcGFydGljdWxhciBwbGF0Zm9ybSBpbg0KICAgIHRhcmdldHMsIHJhdGhlciB0aGFuIHRoZSB1c2VyIGhhdmluZyB0byBkbyB0aGlzIG1hbnVhbGx5Lg0KICAgICIiIg0KICAgIHBsYXRmb3JtX2FyY2hzID0gew0KICAgICAgICAjIFdlIG5vdyBjcm9zcyBjb21waWxlIHg4Nl82NCBvbiBhcm02NCBieSBkZWZhdWx0DQogICAgICAgICJtYWNvcyI6IFsidW5pdmVyc2FsMiIsICJ4ODZfNjQiXSwNCiAgICAgICAgIyBUaGlzIGlzIGEgbGlzdCBvZiBzdXBwb3J0ZWQgZXVtdWxhdGVkIGFyY2hlcyBvbiBsaW51eA0KICAgICAgICAibGludXgiOiBbImFhcmNoNjQiLCAicHBjNjRsZSIsICJzMzkweCIsICJhcm12N2wiXSwNCiAgICB9DQogICAgZm9yIHBsYXRmb3JtLCBhcmNocyBpbiBwbGF0Zm9ybV9hcmNocy5pdGVtcygpOg0KICAgICAgICBpZiBwbGF0Zm9ybSBpbiB0YXJnZXQ6DQogICAgICAgICAgICBmb3IgYXJjaCBpbiBhcmNoczoNCiAgICAgICAgICAgICAgICBpZiB0YXJnZXQuZW5kc3dpdGgoYXJjaCk6DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmNoDQoNCiAgICAjIElmIG5vIGV4cGxpY3QgYXJjaCBoYXMgYmVlbiBzcGVjaWZpZWQgYnVpbGQgYm90aCBhcm02NCBhbmQgeDg2XzY0IG9uIG1hY29zDQogICAgaWYgIm1hY29zIiBpbiB0YXJnZXQ6DQogICAgICAgIHJldHVybiBvcy5lbnZpcm9uLmdldCgiQ0lCV19BUkNIUyIsICJhcm02NCB4ODZfNjQiKQ0KDQogICAgcmV0dXJuIENJQldfQVJDSFMNCg0KDQpkZWYgZ2V0X2FydGlmYWN0X25hbWUodGFyZ2V0KToNCiAgICBhcnRpZmFjdF9uYW1lID0gcmUuc3ViKHIiW1xcIC86PD58Kj9cIiddIiwgIi0iLCB0YXJnZXQpDQogICAgYXJ0aWZhY3RfbmFtZSA9IHJlLnN1YihyIi0rIiwgIi0iLCBhcnRpZmFjdF9uYW1lKQ0KICAgIHJldHVybiBhcnRpZmFjdF9uYW1lDQoNCg0KZGVmIGdldF9tYXRyaXhfaXRlbSh0YXJnZXQpOg0KICAgIGV4dHJhX3RhcmdldF9hcmdzID0ge30NCiAgICBpZiBpc2luc3RhbmNlKHRhcmdldCwgZGljdCk6DQogICAgICAgIGV4dHJhX3RhcmdldF9hcmdzID0gdGFyZ2V0DQogICAgICAgIHRhcmdldCA9IGV4dHJhX3RhcmdldF9hcmdzLnBvcCgidGFyZ2V0IikNCiAgICByZXR1cm4gew0KICAgICAgICAidGFyZ2V0IjogdGFyZ2V0LA0KICAgICAgICAicnVucy1vbiI6IGdldF9vcyh0YXJnZXQpLA0KICAgICAgICAiQ0lCV19CVUlMRCI6IGdldF9jaWJ3X2J1aWxkKHRhcmdldCksDQogICAgICAgICJDSUJXX0FSQ0hTIjogZ2V0X2NpYndfYXJjaHModGFyZ2V0KSwNCiAgICAgICAgImFydGlmYWN0LW5hbWUiOiBnZXRfYXJ0aWZhY3RfbmFtZSh0YXJnZXQpLA0KICAgICAgICAqKmV4dHJhX3RhcmdldF9hcmdzLA0KICAgIH0NCg0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIGxvYWRfYnVpbGRfdGFyZ2V0cygpDQo=
      - id: set-outputs
        run: pipx run load_build_targets.py --targets "${{ inputs.targets }}"
        shell: sh
      - id: set-upload
        run: |
          if [ $UPLOAD_TO_PYPI == "true" ] || [ $UPLOAD_TAG == "true" ];
          then
            echo "upload_to_pypi=true" >> $GITHUB_OUTPUT
          else
            echo "upload_to_pypi=false" >> $GITHUB_OUTPUT
          fi
        env:
          UPLOAD_TO_PYPI: ${{ inputs.upload_to_pypi }}
          UPLOAD_TAG: ${{ startsWith(inputs.upload_to_pypi, 'refs/tags/') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'release' || github.event_name == 'create') && startsWith(github.ref, inputs.upload_to_pypi) }}

  build_wheels:
    name: Build ${{ matrix.target }} wheels
    needs: [targets]
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    strategy:
      fail-fast: ${{ inputs.fail-fast }}
      matrix: ${{fromJSON(needs.targets.outputs.matrix)}}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          lfs: true
          submodules: ${{ inputs.submodules }}
          ref: ${{ inputs.checkout_ref }}
      - name: Get machine arch
        if: ${{ runner.os == 'Linux' }}
        id: uname_m
        run: |
          echo "uname_m=$(uname -m)" >> "$GITHUB_OUTPUT"
      - name: Set up QEMU
        if: ${{ runner.os == 'Linux' && (matrix.CIBW_ARCHS != 'auto' && matrix.CIBW_ARCHS != steps.uname_m.outputs.uname_m) }}
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: all
      - name: Parse dependency groups
        shell: bash
        run: |
          echo "space_sep_groups=$( python -c "print('${{ inputs.test_groups }}'.replace(',', ' '))" )" >> "$GITHUB_ENV"
      - name: Configure cibuildwheel
        shell: bash
        run: |
          if [ -n "${{ inputs.test_extras }}" ];
          then
            echo "CIBW_TEST_EXTRAS=${{ inputs.test_extras }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ inputs.test_groups }}" ];
          then
            echo "CIBW_TEST_GROUPS=$space_sep_groups" >> $GITHUB_ENV
          fi
          set +e
          IFS='' read -r -d '' test_command <<"EOF"
          ${{ inputs.test_command }}
          EOF
          set -e
          if [ -n "$test_command" ];
          then
            echo "CIBW_TEST_COMMAND<<EOF" >> $GITHUB_ENV
            echo $(echo $test_command | tr -d '\n') >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          cat $GITHUB_ENV
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        if: ${{ inputs.env != '' }}
        with:
          python-version: '3.12'
      - id: set-env
        if: ${{ inputs.env != '' }}
        run: |
          echo $SET_ENV_SCRIPT | base64 --decode > set_env.py
          pipx run set_env.py "${{ inputs.env }}"
          rm set_env.py
        shell: sh
        env:
          SET_ENV_SCRIPT: IyAvLy8gc2NyaXB0DQojIHJlcXVpcmVzLXB5dGhvbiA9ICI9PTMuMTIiDQojIGRlcGVuZGVuY2llcyA9IFsNCiMgICAgICJweXlhbWw9PTYuMC4yIiwNCiMgXQ0KIyAvLy8NCmltcG9ydCBqc29uDQppbXBvcnQgb3MNCmltcG9ydCBzeXMNCg0KaW1wb3J0IHlhbWwNCg0KR0lUSFVCX0VOViA9IG9zLmdldGVudigiR0lUSFVCX0VOViIpDQppZiBHSVRIVUJfRU5WIGlzIE5vbmU6DQogICAgcmFpc2UgVmFsdWVFcnJvcigiR0lUSFVCX0VOViBub3Qgc2V0LiBNdXN0IGJlIHJ1biBpbnNpZGUgR2l0SHViIEFjdGlvbnMuIikNCg0KREVMSU1JVEVSID0gIkVPRiINCg0KDQpkZWYgc2V0X2VudihlbnYpOg0KDQogICAgZW52ID0geWFtbC5sb2FkKGVudiwgTG9hZGVyPXlhbWwuQmFzZUxvYWRlcikNCiAgICBwcmludChqc29uLmR1bXBzKGVudiwgaW5kZW50PTIpKQ0KDQogICAgaWYgbm90IGlzaW5zdGFuY2UoZW52LCBkaWN0KToNCiAgICAgICAgdGl0bGUgPSAiYGVudmAgbXVzdCBiZSBtYXBwaW5nIg0KICAgICAgICBtZXNzYWdlID0gZiJgZW52YCBtdXN0IGJlIG1hcHBpbmcgb2YgZW52IHZhcmlhYmxlcyB0byB2YWx1ZXMsIGdvdCB0eXBlIHt0eXBlKGVudil9Ig0KICAgICAgICBwcmludChmIjo6ZXJyb3IgdGl0bGU9e3RpdGxlfTo6e21lc3NhZ2V9IikNCiAgICAgICAgZXhpdCgxKQ0KDQogICAgZm9yIGssIHYgaW4gZW52Lml0ZW1zKCk6DQoNCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uodiwgc3RyKToNCiAgICAgICAgICAgIHRpdGxlID0gImBlbnZgIHZhbHVlcyBtdXN0IGJlIHN0cmluZ3MiDQogICAgICAgICAgICBtZXNzYWdlID0gZiJgZW52YCB2YWx1ZXMgbXVzdCBiZSBzdHJpbmdzLCBidXQgdmFsdWUgb2Yge2t9IGhhcyB0eXBlIHt0eXBlKHYpfSINCiAgICAgICAgICAgIHByaW50KGYiOjplcnJvciB0aXRsZT17dGl0bGV9Ojp7bWVzc2FnZX0iKQ0KICAgICAgICAgICAgZXhpdCgxKQ0KDQogICAgICAgIHYgPSB2LnNwbGl0KCJcbiIpDQoNCiAgICAgICAgd2l0aCBvcGVuKEdJVEhVQl9FTlYsICJhIikgYXMgZjoNCiAgICAgICAgICAgIGlmIGxlbih2KSA9PSAxOg0KICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7a309e3ZbMF19XG4iKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBmb3IgbGluZSBpbiB2Og0KICAgICAgICAgICAgICAgICAgICBhc3NlcnQgbGluZS5zdHJpcCgpICE9IERFTElNSVRFUg0KICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7a308PHtERUxJTUlURVJ9XG4iKQ0KICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIHY6DQogICAgICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7bGluZX1cbiIpDQogICAgICAgICAgICAgICAgZi53cml0ZShmIntERUxJTUlURVJ9XG4iKQ0KDQogICAgICAgIHByaW50KGYie2t9IHdyaXR0ZW4gdG8gR0lUSFVCX0VOViIpDQoNCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBzZXRfZW52KHN5cy5hcmd2WzFdKQ0K
      - name: Run cibuildwheel
        uses: pypa/cibuildwheel@9c00cb4f6b517705a3794b22395aedc36257242c # v3.2.1
        with:
          output-dir: dist
        env:
          CIBW_BUILD: ${{ matrix.CIBW_BUILD }}
          CIBW_ARCHS: ${{ matrix.CIBW_ARCHS }}
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: |
          needs.targets.outputs.upload_to_pypi == 'true' || inputs.upload_to_anaconda
        with:
          name: "dist-${{ matrix.artifact-name }}"
          path: dist/*

  build_sdist:
    name: Build source distribution
    needs: [targets]
    if: ${{ inputs.sdist }}
    runs-on: ${{ inputs.sdist-runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        if: ${{ inputs.env != '' }}
        with:
          python-version: '3.12'
      - id: set-env
        if: ${{ inputs.env != '' }}
        run: |
          echo $SET_ENV_SCRIPT | base64 --decode > set_env.py
          pipx run set_env.py "${{ inputs.env }}"
          rm set_env.py
        shell: sh
        env:
          SET_ENV_SCRIPT: IyAvLy8gc2NyaXB0DQojIHJlcXVpcmVzLXB5dGhvbiA9ICI9PTMuMTIiDQojIGRlcGVuZGVuY2llcyA9IFsNCiMgICAgICJweXlhbWw9PTYuMC4yIiwNCiMgXQ0KIyAvLy8NCmltcG9ydCBqc29uDQppbXBvcnQgb3MNCmltcG9ydCBzeXMNCg0KaW1wb3J0IHlhbWwNCg0KR0lUSFVCX0VOViA9IG9zLmdldGVudigiR0lUSFVCX0VOViIpDQppZiBHSVRIVUJfRU5WIGlzIE5vbmU6DQogICAgcmFpc2UgVmFsdWVFcnJvcigiR0lUSFVCX0VOViBub3Qgc2V0LiBNdXN0IGJlIHJ1biBpbnNpZGUgR2l0SHViIEFjdGlvbnMuIikNCg0KREVMSU1JVEVSID0gIkVPRiINCg0KDQpkZWYgc2V0X2VudihlbnYpOg0KDQogICAgZW52ID0geWFtbC5sb2FkKGVudiwgTG9hZGVyPXlhbWwuQmFzZUxvYWRlcikNCiAgICBwcmludChqc29uLmR1bXBzKGVudiwgaW5kZW50PTIpKQ0KDQogICAgaWYgbm90IGlzaW5zdGFuY2UoZW52LCBkaWN0KToNCiAgICAgICAgdGl0bGUgPSAiYGVudmAgbXVzdCBiZSBtYXBwaW5nIg0KICAgICAgICBtZXNzYWdlID0gZiJgZW52YCBtdXN0IGJlIG1hcHBpbmcgb2YgZW52IHZhcmlhYmxlcyB0byB2YWx1ZXMsIGdvdCB0eXBlIHt0eXBlKGVudil9Ig0KICAgICAgICBwcmludChmIjo6ZXJyb3IgdGl0bGU9e3RpdGxlfTo6e21lc3NhZ2V9IikNCiAgICAgICAgZXhpdCgxKQ0KDQogICAgZm9yIGssIHYgaW4gZW52Lml0ZW1zKCk6DQoNCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uodiwgc3RyKToNCiAgICAgICAgICAgIHRpdGxlID0gImBlbnZgIHZhbHVlcyBtdXN0IGJlIHN0cmluZ3MiDQogICAgICAgICAgICBtZXNzYWdlID0gZiJgZW52YCB2YWx1ZXMgbXVzdCBiZSBzdHJpbmdzLCBidXQgdmFsdWUgb2Yge2t9IGhhcyB0eXBlIHt0eXBlKHYpfSINCiAgICAgICAgICAgIHByaW50KGYiOjplcnJvciB0aXRsZT17dGl0bGV9Ojp7bWVzc2FnZX0iKQ0KICAgICAgICAgICAgZXhpdCgxKQ0KDQogICAgICAgIHYgPSB2LnNwbGl0KCJcbiIpDQoNCiAgICAgICAgd2l0aCBvcGVuKEdJVEhVQl9FTlYsICJhIikgYXMgZjoNCiAgICAgICAgICAgIGlmIGxlbih2KSA9PSAxOg0KICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7a309e3ZbMF19XG4iKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBmb3IgbGluZSBpbiB2Og0KICAgICAgICAgICAgICAgICAgICBhc3NlcnQgbGluZS5zdHJpcCgpICE9IERFTElNSVRFUg0KICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7a308PHtERUxJTUlURVJ9XG4iKQ0KICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIHY6DQogICAgICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7bGluZX1cbiIpDQogICAgICAgICAgICAgICAgZi53cml0ZShmIntERUxJTUlURVJ9XG4iKQ0KDQogICAgICAgIHByaW50KGYie2t9IHdyaXR0ZW4gdG8gR0lUSFVCX0VOViIpDQoNCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBzZXRfZW52KHN5cy5hcmd2WzFdKQ0K
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          lfs: true
          submodules: ${{ inputs.submodules }}
      - name: Install dependencies
        if: ${{ inputs.libraries != '' }}
        uses: ConorMacBride/install-package@3e7ad059e07782ee54fa35f827df52aae0626f30 # v1.1.0
        with:
          apt: ${{ inputs.libraries }}
      - id: build
        uses: OpenAstronomy/build-python-dist@9a4b2bd6bda5c48ef3c12b53504ee2263ed032e3 # v1.1.0
        with:
          test_groups: ${{ inputs.test_groups }}
          test_extras: ${{ inputs.test_extras }}
          test_command: ${{ inputs.test_command }}
          pure_python_wheel: false
          python-version: '3.12'
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: |
          needs.targets.outputs.upload_to_pypi == 'true' || inputs.upload_to_anaconda
        with:
          name: dist-sdist
          path: dist/*

  upload:
    name: Upload
    needs: [targets, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.targets.result == 'success' &&
      ( needs.targets.outputs.upload_to_pypi == 'true' ||
        inputs.upload_to_anaconda ) &&
      needs.build_wheels.result != 'failure' &&
      needs.build_sdist.result != 'failure'
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: dist-*
          path: dist
          merge-multiple: true
      - uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        name: Upload to PyPI
        if: ${{ needs.targets.outputs.upload_to_pypi == 'true' }}
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
          repository-url: ${{ inputs.repository_url }}
      - uses: OpenAstronomy/publish-wheels-anaconda@eae491141709933a7636af70b070e4a92d1a45be # v1.0.1
        if: ${{ inputs.upload_to_anaconda }}
        with:
          anaconda_user: ${{ inputs.anaconda_user }}
          anaconda_package: ${{ inputs.anaconda_package }}
          anaconda_token: ${{ secrets.anaconda_token }}
          keep_n_latest: ${{ inputs.anaconda_keep_n_latest }}
