name: Test Python package

on:
  workflow_call:
    inputs:
      envs:
        description: Array of tox environments to test
        required: true
        type: string
      libraries:
        description: Additional packages to install
        required: false
        default: ''
        type: string
      posargs:
        description: Positional arguments for the underlying tox test command
        required: false
        default: ''
        type: string
      toxdeps:
        description: Tox dependencies
        required: false
        default: ''
        type: string
      toxargs:
        description: Positional arguments for tox
        required: false
        default: ''
        type: string
      pytest:
        description: Whether pytest is run
        required: false
        default: true
        type: boolean
      pytest-results-summary:
        description: Whether to report test summary
        required: false
        default: false
        type: boolean
      coverage:
        description: Coverage providers to upload to
        required: false
        default: ''
        type: string
      conda:
        description: Whether to test with conda
        required: false
        default: 'auto'
        type: string
      setenv:
        description: A map of environment variables to be available when testing
        required: false
        default: ''
        type: string
      display:
        description: Whether to setup a headless display
        required: false
        default: false
        type: boolean
      cache-path:
        description: A list of files, directories, and wildcard patterns to cache and restore
        required: false
        default: ''
        type: string
      cache-key:
        description: An explicit key for restoring and saving the cache
        required: false
        default: ''
        type: string
      cache-restore-keys:
        description: An ordered list of keys to use for restoring the cache if no cache hit occurred for key
        required: false
        default: ''
        type: string
      artifact-path:
        description: A list of files, directories, and wildcard patterns to upload as artifacts
        required: false
        default: ''
        type: string
      runs-on:
        description: Which runner image to use for each OS
        required: false
        default: ''
        type: string
      default_python:
        description: Default version of Python
        required: false
        default: '3.x'
        type: string
      fail-fast:
        description: Whether to cancel all in-progress jobs if any job fails
        required: false
        default: false
        type: boolean
      timeout-minutes:
        description: The maximum number of minutes to let a job run before GitHub automatically cancels it
        required: false
        default: 360
        type: number
      submodules:
        description: Whether to checkout submodules
        required: false
        default: true
        type: boolean
      checkout_ref:
        description: The ref to checkout
        required: false
        default: ''
        type: string
    secrets:
      CODECOV_TOKEN:
        description: Codecov upload token
        required: false

jobs:

  envs:
    name: Load tox environments
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    steps:
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'
      - run: echo $TOX_MATRIX_SCRIPT | base64 --decode > tox_matrix.py
        env:
          TOX_MATRIX_SCRIPT: IyAvLy8gc2NyaXB0DQojIHJlcXVpcmVzLXB5dGhvbiA9ICI9PTMuMTIiDQojIGRlcGVuZGVuY2llcyA9IFsNCiMgICAgICJjbGljaz09OC4yLjEiLA0KIyAgICAgInB5eWFtbD09Ni4wLjIiLA0KIyBdDQojIC8vLw0KaW1wb3J0IGpzb24NCmltcG9ydCBvcw0KaW1wb3J0IHJlDQoNCmltcG9ydCBjbGljaw0KaW1wb3J0IHlhbWwNCg0KDQpAY2xpY2suY29tbWFuZCgpDQpAY2xpY2sub3B0aW9uKCItLWVudnMiLCBkZWZhdWx0PSIiKQ0KQGNsaWNrLm9wdGlvbigiLS1saWJyYXJpZXMiLCBkZWZhdWx0PSIiKQ0KQGNsaWNrLm9wdGlvbigiLS1wb3NhcmdzIiwgZGVmYXVsdD0iIikNCkBjbGljay5vcHRpb24oIi0tdG94ZGVwcyIsIGRlZmF1bHQ9IiIpDQpAY2xpY2sub3B0aW9uKCItLXRveGFyZ3MiLCBkZWZhdWx0PSIiKQ0KQGNsaWNrLm9wdGlvbigiLS1weXRlc3QiLCBkZWZhdWx0PSJ0cnVlIikNCkBjbGljay5vcHRpb24oIi0tcHl0ZXN0LXJlc3VsdHMtc3VtbWFyeSIsIGRlZmF1bHQ9ImZhbHNlIikNCkBjbGljay5vcHRpb24oIi0tY292ZXJhZ2UiLCBkZWZhdWx0PSIiKQ0KQGNsaWNrLm9wdGlvbigiLS1jb25kYSIsIGRlZmF1bHQ9ImF1dG8iKQ0KQGNsaWNrLm9wdGlvbigiLS1zZXRlbnYiLCBkZWZhdWx0PSIiKQ0KQGNsaWNrLm9wdGlvbigiLS1kaXNwbGF5IiwgZGVmYXVsdD0iZmFsc2UiKQ0KQGNsaWNrLm9wdGlvbigiLS1jYWNoZS1wYXRoIiwgZGVmYXVsdD0iIikNCkBjbGljay5vcHRpb24oIi0tY2FjaGUta2V5IiwgZGVmYXVsdD0iIikNCkBjbGljay5vcHRpb24oIi0tY2FjaGUtcmVzdG9yZS1rZXlzIiwgZGVmYXVsdD0iIikNCkBjbGljay5vcHRpb24oIi0tYXJ0aWZhY3QtcGF0aCIsIGRlZmF1bHQ9IiIpDQpAY2xpY2sub3B0aW9uKCItLXJ1bnMtb24iLCBkZWZhdWx0PSIiKQ0KQGNsaWNrLm9wdGlvbigiLS1kZWZhdWx0LXB5dGhvbiIsIGRlZmF1bHQ9IiIpDQpAY2xpY2sub3B0aW9uKCItLXRpbWVvdXQtbWludXRlcyIsIGRlZmF1bHQ9IjM2MCIpDQpkZWYgbG9hZF90b3hfdGFyZ2V0cyhlbnZzLCBsaWJyYXJpZXMsIHBvc2FyZ3MsIHRveGRlcHMsIHRveGFyZ3MsIHB5dGVzdCwgcHl0ZXN0X3Jlc3VsdHNfc3VtbWFyeSwNCiAgICAgICAgICAgICAgICAgICAgIGNvdmVyYWdlLCBjb25kYSwgc2V0ZW52LCBkaXNwbGF5LCBjYWNoZV9wYXRoLCBjYWNoZV9rZXksDQogICAgICAgICAgICAgICAgICAgICBjYWNoZV9yZXN0b3JlX2tleXMsIGFydGlmYWN0X3BhdGgsIHJ1bnNfb24sIGRlZmF1bHRfcHl0aG9uLCB0aW1lb3V0X21pbnV0ZXMpOg0KICAgICIiIlNjcmlwdCB0byBsb2FkIHRveCB0YXJnZXRzIGZvciBHaXRIdWIgQWN0aW9ucyB3b3JrZmxvdy4iIiINCiAgICAjIExvYWQgZW52cyBjb25maWcNCiAgICBlbnZzID0geWFtbC5sb2FkKGVudnMsIExvYWRlcj15YW1sLkJhc2VMb2FkZXIpDQogICAgcHJpbnQoanNvbi5kdW1wcyhlbnZzLCBpbmRlbnQ9MikpDQoNCiAgICAjIExvYWQgZ2xvYmFsIGxpYnJhcmllcyBjb25maWcNCiAgICBnbG9iYWxfbGlicmFyaWVzID0gew0KICAgICAgICAiYnJldyI6IFtdLA0KICAgICAgICAiYnJldy1jYXNrIjogW10sDQogICAgICAgICJhcHQiOiBbXSwNCiAgICAgICAgImNob2NvIjogW10sDQogICAgfQ0KICAgIGxpYnJhcmllcyA9IHlhbWwubG9hZChsaWJyYXJpZXMsIExvYWRlcj15YW1sLkJhc2VMb2FkZXIpDQogICAgaWYgbGlicmFyaWVzIGlzIG5vdCBOb25lOg0KICAgICAgICBnbG9iYWxfbGlicmFyaWVzLnVwZGF0ZShsaWJyYXJpZXMpDQogICAgcHJpbnQoanNvbi5kdW1wcyhnbG9iYWxfbGlicmFyaWVzLCBpbmRlbnQ9MikpDQoNCiAgICAjIERlZmF1bHQgaW1hZ2VzIHRvIHVzZSBmb3IgcnVubmVycw0KICAgIGRlZmF1bHRfcnVuc19vbiA9IHsNCiAgICAgICAgImxpbnV4IjogInVidW50dS1sYXRlc3QiLA0KICAgICAgICAibWFjb3MiOiAibWFjb3MtbGF0ZXN0IiwNCiAgICAgICAgIndpbmRvd3MiOiAid2luZG93cy1sYXRlc3QiLA0KICAgIH0NCiAgICBjdXN0b21fcnVuc19vbiA9IHlhbWwubG9hZChydW5zX29uLCBMb2FkZXI9eWFtbC5CYXNlTG9hZGVyKQ0KICAgIGlmIGlzaW5zdGFuY2UoY3VzdG9tX3J1bnNfb24sIGRpY3QpOg0KICAgICAgICBkZWZhdWx0X3J1bnNfb24udXBkYXRlKGN1c3RvbV9ydW5zX29uKQ0KICAgIHByaW50KGpzb24uZHVtcHMoZGVmYXVsdF9ydW5zX29uLCBpbmRlbnQ9MikpDQoNCiAgICAjIERlZmF1bHQgc3RyaW5nIHBhcmFtZXRlcnMgd2hpY2ggY2FuIGJlIG92ZXJ3cml0dGVuIGJ5IGVhY2ggZW52DQogICAgc3RyaW5nX3BhcmFtZXRlcnMgPSB7DQogICAgICAgICJwb3NhcmdzIjogcG9zYXJncywNCiAgICAgICAgInRveGRlcHMiOiB0b3hkZXBzLA0KICAgICAgICAidG94YXJncyI6IHRveGFyZ3MsDQogICAgICAgICJweXRlc3QiOiBweXRlc3QsDQogICAgICAgICJweXRlc3QtcmVzdWx0cy1zdW1tYXJ5IjogcHl0ZXN0X3Jlc3VsdHNfc3VtbWFyeSwNCiAgICAgICAgImNvdmVyYWdlIjogY292ZXJhZ2UsDQogICAgICAgICJjb25kYSI6IGNvbmRhLA0KICAgICAgICAic2V0ZW52Ijogc2V0ZW52LA0KICAgICAgICAiZGlzcGxheSI6IGRpc3BsYXksDQogICAgICAgICJjYWNoZS1wYXRoIjogY2FjaGVfcGF0aCwNCiAgICAgICAgImNhY2hlLWtleSI6IGNhY2hlX2tleSwNCiAgICAgICAgImNhY2hlLXJlc3RvcmUta2V5cyI6IGNhY2hlX3Jlc3RvcmVfa2V5cywNCiAgICAgICAgImFydGlmYWN0LXBhdGgiOiBhcnRpZmFjdF9wYXRoLA0KICAgICAgICAidGltZW91dC1taW51dGVzIjogdGltZW91dF9taW51dGVzLA0KICAgIH0NCg0KICAgICMgQ3JlYXRlIG1hdHJpeA0KICAgIG1hdHJpeCA9IHsiaW5jbHVkZSI6IFtdfQ0KICAgIGZvciBlbnYgaW4gZW52czoNCiAgICAgICAgbWF0cml4WyJpbmNsdWRlIl0uYXBwZW5kKGdldF9tYXRyaXhfaXRlbSgNCiAgICAgICAgICAgIGVudiwNCiAgICAgICAgICAgIGdsb2JhbF9saWJyYXJpZXM9Z2xvYmFsX2xpYnJhcmllcywNCiAgICAgICAgICAgIGdsb2JhbF9zdHJpbmdfcGFyYW1ldGVycz1zdHJpbmdfcGFyYW1ldGVycywNCiAgICAgICAgICAgIHJ1bnNfb249ZGVmYXVsdF9ydW5zX29uLA0KICAgICAgICAgICAgZGVmYXVsdF9weXRob249ZGVmYXVsdF9weXRob24sDQogICAgICAgICkpDQoNCiAgICAjIE91dHB1dCBtYXRyaXgNCiAgICBwcmludChqc29uLmR1bXBzKG1hdHJpeCwgaW5kZW50PTIpKQ0KICAgIHdpdGggb3Blbihvcy5lbnZpcm9uWyJHSVRIVUJfT1VUUFVUIl0sICJhIikgYXMgZjoNCiAgICAgICAgZi53cml0ZShmIm1hdHJpeD17anNvbi5kdW1wcyhtYXRyaXgpfVxuIikNCg0KDQpkZWYgZ2V0X21hdHJpeF9pdGVtKGVudiwgZ2xvYmFsX2xpYnJhcmllcywgZ2xvYmFsX3N0cmluZ19wYXJhbWV0ZXJzLA0KICAgICAgICAgICAgICAgICAgICBydW5zX29uLCBkZWZhdWx0X3B5dGhvbik6DQoNCiAgICAjIGRlZmluZSBzcGVjIGZvciBlYWNoIG1hdHJpeCBpbmNsdWRlICgrIGdsb2JhbF9zdHJpbmdfcGFyYW1ldGVycykNCiAgICBpdGVtID0gew0KICAgICAgICAib3MiOiBOb25lLA0KICAgICAgICAidG94ZW52IjogTm9uZSwNCiAgICAgICAgInB5dGhvbl92ZXJzaW9uIjogTm9uZSwNCiAgICAgICAgIm5hbWUiOiBOb25lLA0KICAgICAgICAicHl0ZXN0X2ZsYWciOiBOb25lLA0KICAgICAgICAibGlicmFyaWVzX2JyZXciOiBOb25lLA0KICAgICAgICAibGlicmFyaWVzX2JyZXdfY2FzayI6IE5vbmUsDQogICAgICAgICJsaWJyYXJpZXNfYXB0IjogTm9uZSwNCiAgICAgICAgImxpYnJhcmllc19jaG9jbyI6IE5vbmUsDQogICAgICAgICJjYWNoZS1wYXRoIjogTm9uZSwNCiAgICAgICAgImNhY2hlLWtleSI6IE5vbmUsDQogICAgICAgICJjYWNoZS1yZXN0b3JlLWtleXMiOiBOb25lLA0KICAgICAgICAiYXJ0aWZhY3QtbmFtZSI6IE5vbmUsDQogICAgICAgICJhcnRpZmFjdC1wYXRoIjogTm9uZSwNCiAgICAgICAgInRpbWVvdXQtbWludXRlcyI6IE5vbmUsDQogICAgfQ0KICAgIGZvciBzdHJpbmdfcGFyYW0sIGRlZmF1bHQgaW4gZ2xvYmFsX3N0cmluZ19wYXJhbWV0ZXJzLml0ZW1zKCk6DQogICAgICAgIGVudl92YWx1ZSA9IGVudi5nZXQoc3RyaW5nX3BhcmFtKQ0KICAgICAgICBpdGVtW3N0cmluZ19wYXJhbV0gPSBkZWZhdWx0IGlmIGVudl92YWx1ZSBpcyBOb25lIGVsc2UgZW52X3ZhbHVlDQoNCiAgICAjIHNldCBvcyBhbmQgdG94ZW52DQogICAgZm9yIGssIHYgaW4gcnVuc19vbi5pdGVtcygpOg0KICAgICAgICBpZiBrIGluIGVudjoNCiAgICAgICAgICAgIHBsYXRmb3JtID0gaw0KICAgICAgICAgICAgaXRlbVsib3MiXSA9IGVudi5nZXQoInJ1bnMtb24iLCB2KQ0KICAgICAgICAgICAgaXRlbVsidG94ZW52Il0gPSBlbnZba10NCiAgICBhc3NlcnQgaXRlbVsib3MiXSBpcyBub3QgTm9uZSBhbmQgaXRlbVsidG94ZW52Il0gaXMgbm90IE5vbmUNCg0KICAgICMgc2V0IHB5dGhvbl92ZXJzaW9uDQogICAgcHl0aG9uX3ZlcnNpb24gPSBlbnYuZ2V0KCJweXRob24tdmVyc2lvbiIpDQogICAgbSA9IHJlLnNlYXJjaCgiXnB5KDJ8MykoWzAtOV0rdD8pIiwgaXRlbVsidG94ZW52Il0pDQogICAgaWYgcHl0aG9uX3ZlcnNpb24gaXMgbm90IE5vbmU6DQogICAgICAgIGl0ZW1bInB5dGhvbl92ZXJzaW9uIl0gPSBweXRob25fdmVyc2lvbg0KICAgIGVsaWYgbSBpcyBub3QgTm9uZToNCiAgICAgICAgbWFqb3IsIG1pbm9yID0gbS5ncm91cHMoKQ0KICAgICAgICBpdGVtWyJweXRob25fdmVyc2lvbiJdID0gZiJ7bWFqb3J9LnttaW5vcn0iDQogICAgZWxzZToNCiAgICAgICAgaXRlbVsicHl0aG9uX3ZlcnNpb24iXSA9IGVudi5nZXQoImRlZmF1bHRfcHl0aG9uIikgb3IgZGVmYXVsdF9weXRob24NCg0KICAgICMgc2V0IG5hbWUNCiAgICBpdGVtWyJuYW1lIl0gPSBlbnYuZ2V0KCJuYW1lIikgb3IgZid7aXRlbVsidG94ZW52Il19ICh7aXRlbVsib3MiXX0pJw0KDQogICAgIyBzZXQgYXJ0aWZhY3QtbmFtZSAocmVwbGFjZSBpbnZhbGlkIHBhdGggY2hhcmFjdGVycykNCiAgICBpdGVtWyJhcnRpZmFjdC1uYW1lIl0gPSByZS5zdWIociJbXFwgLzo8PnwqP1wiJ10iLCAiLSIsIGl0ZW1bIm5hbWUiXSkNCiAgICBpdGVtWyJhcnRpZmFjdC1uYW1lIl0gPSByZS5zdWIociItKyIsICItIiwgaXRlbVsiYXJ0aWZhY3QtbmFtZSJdKQ0KDQogICAgIyBzZXQgcHl0ZXN0X2ZsYWcNCiAgICBpdGVtWyJweXRlc3RfZmxhZyJdID0gIiINCiAgICBzZXAgPSByIlxcIiBpZiBwbGF0Zm9ybSA9PSAid2luZG93cyIgZWxzZSAiLyINCiAgICBpZiBpdGVtWyJweXRlc3QiXSA9PSAidHJ1ZSIgYW5kICJjb2RlY292IiBpbiBpdGVtLmdldCgiY292ZXJhZ2UiLCAiIik6DQogICAgICAgIGl0ZW1bInB5dGVzdF9mbGFnIl0gKz0gKA0KICAgICAgICAgICAgcmYiLS1jb3YtcmVwb3J0PXhtbDoke3tHSVRIVUJfV09SS1NQQUNFfX17c2VwfWNvdmVyYWdlLnhtbCAiKQ0KICAgIGlmIGl0ZW1bInB5dGVzdCJdID09ICJ0cnVlIiBhbmQgaXRlbVsicHl0ZXN0LXJlc3VsdHMtc3VtbWFyeSJdID09ICJ0cnVlIjoNCiAgICAgICAgaXRlbVsicHl0ZXN0X2ZsYWciXSArPSByZiItLWp1bml0eG1sICR7e0dJVEhVQl9XT1JLU1BBQ0V9fXtzZXB9cmVzdWx0cy54bWwgIg0KDQogICAgIyBzZXQgbGlicmFyaWVzDQogICAgZW52X2xpYnJhcmllcyA9IGVudi5nZXQoImxpYnJhcmllcyIpDQogICAgaWYgaXNpbnN0YW5jZShlbnZfbGlicmFyaWVzLCBzdHIpIGFuZCBsZW4oZW52X2xpYnJhcmllcy5zdHJpcCgpKSA9PSAwOg0KICAgICAgICBlbnZfbGlicmFyaWVzID0ge30gICMgbm8gbGlicmFyaWVzIHJlcXVlc3RlZCBmb3IgZW52aXJvbm1lbnQNCiAgICBsaWJyYXJpZXMgPSBnbG9iYWxfbGlicmFyaWVzIGlmIGVudl9saWJyYXJpZXMgaXMgTm9uZSBlbHNlIGVudl9saWJyYXJpZXMNCiAgICBmb3IgbWFuYWdlciBpbiBbImJyZXciLCAiYnJld19jYXNrIiwgImFwdCIsICJjaG9jbyJdOg0KICAgICAgICBpdGVtW2YibGlicmFyaWVzX3ttYW5hZ2VyfSJdID0gIiAiLmpvaW4obGlicmFyaWVzLmdldChtYW5hZ2VyLCBbXSkpDQoNCiAgICAjIHNldCAiYXV0byIgY29uZGEgdmFsdWUNCiAgICBpZiBpdGVtWyJjb25kYSJdID09ICJhdXRvIjoNCiAgICAgICAgaXRlbVsiY29uZGEiXSA9ICJ0cnVlIiBpZiAiY29uZGEiIGluIGl0ZW1bInRveGVudiJdIGVsc2UgImZhbHNlIg0KDQogICAgIyBpbmplY3QgdG94ZGVwcyBmb3IgY29uZGENCiAgICBpZiBpdGVtWyJjb25kYSJdID09ICJ0cnVlIiBhbmQgInRveC1jb25kYSIgbm90IGluIGl0ZW1bInRveGRlcHMiXS5sb3dlcigpOg0KICAgICAgICBpdGVtWyJ0b3hkZXBzIl0gPSAoInRveC1jb25kYSAiICsgaXRlbVsidG94ZGVwcyJdKS5zdHJpcCgpDQoNCiAgICAjIG1ha2UgdGltZW91dC1taW51dGVzIGEgbnVtYmVyDQogICAgaXRlbVsidGltZW91dC1taW51dGVzIl0gPSBpbnQoaXRlbVsidGltZW91dC1taW51dGVzIl0pDQoNCiAgICAjIHZlcmlmeSB2YWx1ZXMNCiAgICBhc3NlcnQgaXRlbVsicHl0ZXN0Il0gaW4geyJ0cnVlIiwgImZhbHNlIn0NCiAgICBhc3NlcnQgaXRlbVsiY29uZGEiXSBpbiB7InRydWUiLCAiZmFsc2UifQ0KICAgIGFzc2VydCBpdGVtWyJkaXNwbGF5Il0gaW4geyJ0cnVlIiwgImZhbHNlIn0NCg0KICAgIHJldHVybiBpdGVtDQoNCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBsb2FkX3RveF90YXJnZXRzKCkNCg==
      - run: cat tox_matrix.py
      - id: set-outputs
        run: |
          pipx run tox_matrix.py --envs "${{ inputs.envs }}" --libraries "${{ inputs.libraries }}" \
          --posargs "${{ inputs.posargs }}" --toxdeps "${{ inputs.toxdeps }}" \
          --toxargs "${{ inputs.toxargs }}" --pytest "${{ inputs.pytest }}" \
          --pytest-results-summary "${{ inputs.pytest-results-summary }}" \
          --coverage "${{ inputs.coverage }}" --conda "${{ inputs.conda }}" \
          --setenv "${{ inputs.setenv }}" \
          --display "${{ inputs.display }}" --cache-path "${{ inputs.cache-path }}" \
          --cache-key "${{ inputs.cache-key }}" --cache-restore-keys "${{ inputs.cache-restore-keys }}" \
          --artifact-path "${{ inputs.artifact-path }}" \
          --runs-on "${{ inputs.runs-on }}" --default-python "${{ inputs.default_python }}" \
          --timeout-minutes "${{ inputs.timeout-minutes }}"
        shell: sh

  tox:
    name: ${{ matrix.name }}
    needs: [envs]
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ matrix.timeout-minutes }}
    strategy:
      fail-fast: ${{ inputs.fail-fast }}
      matrix: ${{fromJSON(needs.envs.outputs.matrix)}}
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          lfs: true
          submodules: ${{ inputs.submodules }}
          ref: ${{ inputs.checkout_ref }}

      - name: Cache ${{ matrix.cache_key }}
        if: ${{ matrix.cache-path != '' && matrix.cache-key != '' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ${{ matrix.cache-path }}
          key: ${{ matrix.cache-key }}
          restore-keys: ${{ matrix.cache-restore-keys }}

      - name: Install dependencies
        uses: ConorMacBride/install-package@3e7ad059e07782ee54fa35f827df52aae0626f30 # v1.1.0
        with:
          brew: ${{ matrix.libraries_brew }}
          brew-cask: ${{ matrix.libraries_brew_cask }}
          apt: ${{ matrix.libraries_apt }}
          choco: ${{ matrix.libraries_choco }}

      - name: Setup Python ${{ matrix.python_version }}
        if: ${{ matrix.conda != 'true' }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python_version }}
          allow-prereleases: true

      - name: Setup conda
        if: ${{ matrix.conda == 'true' }}
        uses: mamba-org/setup-micromamba@add3a49764cedee8ee24e82dfde87f5bc2914462 # v2.0.7
        with:
          environment-name: test
          condarc: |
            channels:
              - conda-forge
          create-args: >-
            conda
            python=${{ matrix.python_version }}
            tox
          init-shell: bash
          cache-environment: true
          cache-downloads: true

      - id: set-env
        if: ${{ matrix.setenv != '' }}
        run: |
          echo $SET_ENV_SCRIPT | base64 --decode > set_env.py
          pipx run set_env.py "${{ matrix.setenv }}"
          rm set_env.py
        env:
          SET_ENV_SCRIPT: IyAvLy8gc2NyaXB0DQojIHJlcXVpcmVzLXB5dGhvbiA9ICI9PTMuMTIiDQojIGRlcGVuZGVuY2llcyA9IFsNCiMgICAgICJweXlhbWw9PTYuMC4yIiwNCiMgXQ0KIyAvLy8NCmltcG9ydCBqc29uDQppbXBvcnQgb3MNCmltcG9ydCBzeXMNCg0KaW1wb3J0IHlhbWwNCg0KR0lUSFVCX0VOViA9IG9zLmdldGVudigiR0lUSFVCX0VOViIpDQppZiBHSVRIVUJfRU5WIGlzIE5vbmU6DQogICAgcmFpc2UgVmFsdWVFcnJvcigiR0lUSFVCX0VOViBub3Qgc2V0LiBNdXN0IGJlIHJ1biBpbnNpZGUgR2l0SHViIEFjdGlvbnMuIikNCg0KREVMSU1JVEVSID0gIkVPRiINCg0KDQpkZWYgc2V0X2VudihlbnYpOg0KDQogICAgZW52ID0geWFtbC5sb2FkKGVudiwgTG9hZGVyPXlhbWwuQmFzZUxvYWRlcikNCiAgICBwcmludChqc29uLmR1bXBzKGVudiwgaW5kZW50PTIpKQ0KDQogICAgaWYgbm90IGlzaW5zdGFuY2UoZW52LCBkaWN0KToNCiAgICAgICAgdGl0bGUgPSAiYGVudmAgbXVzdCBiZSBtYXBwaW5nIg0KICAgICAgICBtZXNzYWdlID0gZiJgZW52YCBtdXN0IGJlIG1hcHBpbmcgb2YgZW52IHZhcmlhYmxlcyB0byB2YWx1ZXMsIGdvdCB0eXBlIHt0eXBlKGVudil9Ig0KICAgICAgICBwcmludChmIjo6ZXJyb3IgdGl0bGU9e3RpdGxlfTo6e21lc3NhZ2V9IikNCiAgICAgICAgZXhpdCgxKQ0KDQogICAgZm9yIGssIHYgaW4gZW52Lml0ZW1zKCk6DQoNCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uodiwgc3RyKToNCiAgICAgICAgICAgIHRpdGxlID0gImBlbnZgIHZhbHVlcyBtdXN0IGJlIHN0cmluZ3MiDQogICAgICAgICAgICBtZXNzYWdlID0gZiJgZW52YCB2YWx1ZXMgbXVzdCBiZSBzdHJpbmdzLCBidXQgdmFsdWUgb2Yge2t9IGhhcyB0eXBlIHt0eXBlKHYpfSINCiAgICAgICAgICAgIHByaW50KGYiOjplcnJvciB0aXRsZT17dGl0bGV9Ojp7bWVzc2FnZX0iKQ0KICAgICAgICAgICAgZXhpdCgxKQ0KDQogICAgICAgIHYgPSB2LnNwbGl0KCJcbiIpDQoNCiAgICAgICAgd2l0aCBvcGVuKEdJVEhVQl9FTlYsICJhIikgYXMgZjoNCiAgICAgICAgICAgIGlmIGxlbih2KSA9PSAxOg0KICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7a309e3ZbMF19XG4iKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBmb3IgbGluZSBpbiB2Og0KICAgICAgICAgICAgICAgICAgICBhc3NlcnQgbGluZS5zdHJpcCgpICE9IERFTElNSVRFUg0KICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7a308PHtERUxJTUlURVJ9XG4iKQ0KICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIHY6DQogICAgICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7bGluZX1cbiIpDQogICAgICAgICAgICAgICAgZi53cml0ZShmIntERUxJTUlURVJ9XG4iKQ0KDQogICAgICAgIHByaW50KGYie2t9IHdyaXR0ZW4gdG8gR0lUSFVCX0VOViIpDQoNCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBzZXRfZW52KHN5cy5hcmd2WzFdKQ0K

      - name: Setup headless display
        if: ${{ matrix.display == 'true' }}
        uses: pyvista/setup-headless-display-action@7d84ae825e6d9297a8e99bdbbae20d1b919a0b19 # v4.2

      - name: Install tox
        run: python -m pip install --upgrade tox ${{ matrix.toxdeps }}

      - run: python -m tox -e ${{ matrix.toxenv }} ${{ matrix.toxargs }} -- ${{ matrix.pytest_flag }} ${{ matrix.posargs }}

      - if: ${{ (success() || failure()) && matrix.artifact-path != '' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}

      - if: ${{ (success() || failure()) && matrix.pytest-results-summary == 'true' && matrix.pytest == 'true' }}
        uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86 # v2.4
        with:
          paths: "**/results.xml"

      - name: Upload to Codecov
        # Even if tox fails, upload coverage
        if: ${{ (success() || failure()) && contains(matrix.coverage, 'codecov') && matrix.pytest == 'true' }}
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
