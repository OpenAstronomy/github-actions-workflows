name: Test Python package

on:
  workflow_call:
    inputs:
      envs:
        description: Array of tox environments to test
        required: true
        type: string
      libraries:
        description: Additional packages to install
        required: false
        default: ''
        type: string
      posargs:
        description: Positional arguments for the underlying tox test command
        required: false
        default: ''
        type: string
      toxdeps:
        description: Tox dependencies
        required: false
        default: ''
        type: string
      toxargs:
        description: Positional arguments for tox
        required: false
        default: ''
        type: string
      pytest:
        description: Whether pytest is run
        required: false
        default: true
        type: boolean
      pytest-results-summary:
        description: Whether to report test summary
        required: false
        default: false
        type: boolean
      coverage:
        description: Coverage providers to upload to
        required: false
        default: ''
        type: string
      conda:
        description: Whether to test with conda
        required: false
        default: 'auto'
        type: string
      setenv:
        description: A map of environment variables to be available when testing
        required: false
        default: ''
        type: string
      display:
        description: Whether to setup a headless display
        required: false
        default: false
        type: boolean
      cache-path:
        description: A list of files, directories, and wildcard patterns to cache and restore
        required: false
        default: ''
        type: string
      cache-key:
        description: An explicit key for restoring and saving the cache
        required: false
        default: ''
        type: string
      cache-restore-keys:
        description: An ordered list of keys to use for restoring the cache if no cache hit occurred for key
        required: false
        default: ''
        type: string
      artifact-path:
        description: A list of files, directories, and wildcard patterns to upload as artifacts
        required: false
        default: ''
        type: string
      runs-on:
        description: Which runner image to use for each OS
        required: false
        default: ''
        type: string
      default_python:
        description: Default version of Python
        required: false
        default: '3.x'
        type: string
      fail-fast:
        description: Whether to cancel all in-progress jobs if any job fails
        required: false
        default: false
        type: boolean
      timeout-minutes:
        description: The maximum number of minutes to let a job run before GitHub automatically cancels it
        required: false
        default: 360
        type: number
      submodules:
        description: Whether to checkout submodules
        required: false
        default: true
        type: boolean
      checkout_ref:
        description: The ref to checkout
        required: false
        default: ''
        type: string
    secrets:
      CODECOV_TOKEN:
        description: Codecov upload token
        required: false

jobs:

  envs:
    name: Load tox environments
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'
      - run: echo $TOX_MATRIX_SCRIPT | base64 --decode > tox_matrix.py
        env:
          TOX_MATRIX_SCRIPT: 
      - run: cat tox_matrix.py
      - id: set-outputs
        run: |
          pipx run tox_matrix.py --envs "${{ inputs.envs }}" --libraries "${{ inputs.libraries }}" \
          --posargs "${{ inputs.posargs }}" --toxdeps "${{ inputs.toxdeps }}" \
          --toxargs "${{ inputs.toxargs }}" --pytest "${{ inputs.pytest }}" \
          --pytest-results-summary "${{ inputs.pytest-results-summary }}" \
          --coverage "${{ inputs.coverage }}" --conda "${{ inputs.conda }}" \
          --setenv "${{ inputs.setenv }}" \
          --display "${{ inputs.display }}" --cache-path "${{ inputs.cache-path }}" \
          --cache-key "${{ inputs.cache-key }}" --cache-restore-keys "${{ inputs.cache-restore-keys }}" \
          --artifact-path "${{ inputs.artifact-path }}" \
          --runs-on "${{ inputs.runs-on }}" --default-python "${{ inputs.default_python }}" \
          --timeout-minutes "${{ inputs.timeout-minutes }}"
        shell: sh
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}

  tox:
    name: ${{ matrix.name }}
    needs: [envs]
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ matrix.timeout-minutes }}
    strategy:
      fail-fast: ${{ inputs.fail-fast }}
      matrix: ${{fromJSON(needs.envs.outputs.matrix)}}
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          lfs: true
          submodules: ${{ inputs.submodules }}
          ref: ${{ inputs.checkout_ref }}

      - name: Cache ${{ matrix.cache_key }}
        if: ${{ matrix.cache-path != '' && matrix.cache-key != '' }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ${{ matrix.cache-path }}
          key: ${{ matrix.cache-key }}
          restore-keys: ${{ matrix.cache-restore-keys }}

      - name: Install dependencies
        uses: ConorMacBride/install-package@3e7ad059e07782ee54fa35f827df52aae0626f30 # v1.1.0
        with:
          brew: ${{ matrix.libraries_brew }}
          brew-cask: ${{ matrix.libraries_brew_cask }}
          apt: ${{ matrix.libraries_apt }}
          choco: ${{ matrix.libraries_choco }}

      - name: Setup Python ${{ matrix.python_version }}
        if: ${{ matrix.conda != 'true' }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python_version }}
          allow-prereleases: true

      - name: Setup conda
        if: ${{ matrix.conda == 'true' }}
        uses: mamba-org/setup-micromamba@add3a49764cedee8ee24e82dfde87f5bc2914462 # v2.0.7
        with:
          environment-name: test
          condarc: |
            channels:
              - conda-forge
          create-args: >-
            conda
            python=${{ matrix.python_version }}
            tox
          init-shell: bash
          cache-environment: true
          cache-downloads: true

      - id: set-env
        if: ${{ matrix.setenv != '' }}
        run: |
          echo $SET_ENV_SCRIPT | base64 --decode > set_env.py
          pipx run set_env.py "${{ matrix.setenv }}"
          rm set_env.py
        env:
          SET_ENV_SCRIPT: IyAvLy8gc2NyaXB0CiMgcmVxdWlyZXMtcHl0aG9uID0gIj09My4xMiIKIyBkZXBlbmRlbmNpZXMgPSBbCiMgICAgICJweXlhbWw9PTYuMC4yIiwKIyBdCiMgLy8vCmltcG9ydCBqc29uCmltcG9ydCBvcwppbXBvcnQgc3lzCgppbXBvcnQgeWFtbAoKR0lUSFVCX0VOViA9IG9zLmdldGVudigiR0lUSFVCX0VOViIpCmlmIEdJVEhVQl9FTlYgaXMgTm9uZToKICAgIHJhaXNlIFZhbHVlRXJyb3IoIkdJVEhVQl9FTlYgbm90IHNldC4gTXVzdCBiZSBydW4gaW5zaWRlIEdpdEh1YiBBY3Rpb25zLiIpCgpERUxJTUlURVIgPSAiRU9GIgoKCmRlZiBzZXRfZW52KGVudik6CgogICAgZW52ID0geWFtbC5sb2FkKGVudiwgTG9hZGVyPXlhbWwuQmFzZUxvYWRlcikKICAgIHByaW50KGpzb24uZHVtcHMoZW52LCBpbmRlbnQ9MikpCgogICAgaWYgbm90IGlzaW5zdGFuY2UoZW52LCBkaWN0KToKICAgICAgICB0aXRsZSA9ICJgZW52YCBtdXN0IGJlIG1hcHBpbmciCiAgICAgICAgbWVzc2FnZSA9IGYiYGVudmAgbXVzdCBiZSBtYXBwaW5nIG9mIGVudiB2YXJpYWJsZXMgdG8gdmFsdWVzLCBnb3QgdHlwZSB7dHlwZShlbnYpfSIKICAgICAgICBwcmludChmIjo6ZXJyb3IgdGl0bGU9e3RpdGxlfTo6e21lc3NhZ2V9IikKICAgICAgICBleGl0KDEpCgogICAgZm9yIGssIHYgaW4gZW52Lml0ZW1zKCk6CgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHYsIHN0cik6CiAgICAgICAgICAgIHRpdGxlID0gImBlbnZgIHZhbHVlcyBtdXN0IGJlIHN0cmluZ3MiCiAgICAgICAgICAgIG1lc3NhZ2UgPSBmImBlbnZgIHZhbHVlcyBtdXN0IGJlIHN0cmluZ3MsIGJ1dCB2YWx1ZSBvZiB7a30gaGFzIHR5cGUge3R5cGUodil9IgogICAgICAgICAgICBwcmludChmIjo6ZXJyb3IgdGl0bGU9e3RpdGxlfTo6e21lc3NhZ2V9IikKICAgICAgICAgICAgZXhpdCgxKQoKICAgICAgICB2ID0gdi5zcGxpdCgiXG4iKQoKICAgICAgICB3aXRoIG9wZW4oR0lUSFVCX0VOViwgImEiKSBhcyBmOgogICAgICAgICAgICBpZiBsZW4odikgPT0gMToKICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7a309e3ZbMF19XG4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZm9yIGxpbmUgaW4gdjoKICAgICAgICAgICAgICAgICAgICBhc3NlcnQgbGluZS5zdHJpcCgpICE9IERFTElNSVRFUgogICAgICAgICAgICAgICAgZi53cml0ZShmIntrfTw8e0RFTElNSVRFUn1cbiIpCiAgICAgICAgICAgICAgICBmb3IgbGluZSBpbiB2OgogICAgICAgICAgICAgICAgICAgIGYud3JpdGUoZiJ7bGluZX1cbiIpCiAgICAgICAgICAgICAgICBmLndyaXRlKGYie0RFTElNSVRFUn1cbiIpCgogICAgICAgIHByaW50KGYie2t9IHdyaXR0ZW4gdG8gR0lUSFVCX0VOViIpCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIHNldF9lbnYoc3lzLmFyZ3ZbMV0pCg==

      - name: Setup headless display
        if: ${{ matrix.display == 'true' }}
        uses: pyvista/setup-headless-display-action@7d84ae825e6d9297a8e99bdbbae20d1b919a0b19 # v4.2

      - name: Install tox
        run: python -m pip install --upgrade tox ${{ matrix.toxdeps }}

      - run: python -m tox -e ${{ matrix.toxenv }} ${{ matrix.toxargs }} -- ${{ matrix.pytest_flag }} ${{ matrix.posargs }}

      - if: ${{ (success() || failure()) && matrix.artifact-path != '' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}

      - if: ${{ (success() || failure()) && matrix.pytest-results-summary == 'true' && matrix.pytest == 'true' }}
        uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86 # v2.4
        with:
          paths: "**/results.xml"

      - name: Upload to Codecov
        # Even if tox fails, upload coverage
        if: ${{ (success() || failure()) && contains(matrix.coverage, 'codecov') && matrix.pytest == 'true' }}
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage data to GitHub
        if: ${{ (success() || failure()) && contains(matrix.coverage, 'github') && matrix.pytest == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: .coverage.${{ github.sha }}-${{ runner.os }}-${{ runner.arch }}-${{ matrix.toxenv }}
          path: "${{ github.workspace }}/**/.coverage"

  report_overall_test_coverage:
    needs: [ tox ]
    if: always()
    name: report overall test coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          submodules: ${{ inputs.submodules }}
          ref: ${{ inputs.checkout_ref }}
      - uses: actions/download-artifact@v4
        with:
          pattern: .coverage.*
          merge-multiple: true
      - id: check_downloaded_files
        run: |
          [ "$(ls -A .coverage*)" ] && exit 0 || exit 1
        continue-on-error: true
      - if: steps.check_downloaded_files.outcome == 'success'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - if: steps.check_downloaded_files.outcome == 'success'
        name: generate coverage report
        run: |
          python -Im pip install --upgrade coverage[toml]
          python -Im coverage combine
          python -Im coverage report -i -m --format=markdown >> $GITHUB_STEP_SUMMARY
      - if: steps.check_downloaded_files.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: .coverage
          path: .coverage
